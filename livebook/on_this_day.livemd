<!-- livebook:{"autosave_interval_s":60} -->

# On this day ♫

```elixir
Mix.install(
  [{:coda, "~> 0.1"}, {:kino_explorer, "~> 0.1.8"}],
  config: [
    lastfm_archive: [
      data_dir: "./lastfm_data/",
      user: ""
    ]
  ]
)

alias Coda.OnThisDay
dataframe = Coda.Analytics.OnThisDay.dataframe()

:ok
```

## Introduction

Analytics of all music played on this day, today in this past. This Livebook is based on data created by [lastfm_archive](https://github.com/boonious/lastfm_archive).

### Prerequisite

* [Columnar data transforms](https://hexdocs.pm/lastfm_archive/transforming.html): please create an archive suitable for analytics workloads, in Apache Arrow format, i.e. transform with `format: :ipc_stream` option

### Requirement

* [install](https://livebook.dev/#install) and run this Livebook
* configure this guide as instructued below, click on `Notebook dependencies and setup`, `Setup` (above)

### Configuration

`lastfm_archive` has been configured as a dependency in `Setup` above, modify the following config:

* **`user`**: add your Lastfm username or share it via a `LFM_USER` secret (see [Secrets management](https://hackmd.io/@hugobarauna/By6ulTnMi#Secret-management))

<!-- livebook:{"branch_parent_index":0} -->

## Most played

```elixir
dataframe
|> tap(fn df -> OnThisDay.render_overview(df) |> Kino.render() end)
|> OnThisDay.render_most_played()
```

## Explore the data

In due course, further analytics and visualisation will be presented. These include newly discovered and most frequently played music on this day over the years. Meanwhile you can interactively delve into the data using [Kino explorer](https://hexdocs.pm/kino_explorer/Kino.Explorer.html) below.

<!-- livebook:{"attrs":{"assign_to":null,"collect":true,"data_frame":"dataframe","data_frame_alias":"Elixir.Explorer.DataFrame","is_data_frame":true,"missing_require":"Elixir.Explorer.DataFrame","operations":[{"active":true,"columns":["track","artist","album"],"data_options":{"album":"string","artist":"string","datetime":"datetime[μs]","id":"string","mmdd":"string","track":"string","year":"integer"},"operation_type":"group_by"},{"active":true,"columns":["id"],"data_options":{"album":"string","artist":"string","datetime":"datetime[μs]","id":"string","mmdd":"string","track":"string","year":"integer"},"operation_type":"summarise","query":"count"},{"active":true,"data_options":{"album":"string","artist":"string","id_count":"integer","track":"string"},"direction":"desc","operation_type":"sorting","sort_by":"id_count"}]},"chunks":null,"kind":"Elixir.KinoExplorer.DataTransformCell","livebook_object":"smart_cell"} -->

```elixir
require Explorer.DataFrame

dataframe
|> Explorer.DataFrame.to_lazy()
|> Explorer.DataFrame.group_by(["track", "artist", "album"])
|> Explorer.DataFrame.summarise(id_count: count(id))
|> Explorer.DataFrame.arrange(desc: id_count)
|> Explorer.DataFrame.collect()
```

<!-- livebook:{"offset":2927,"stamp":{"token":"QTEyOEdDTQ.719s9kebfZY_eSI_hOKSX6BTCrMf1g1YcrDxdLkGCYSHO41anXnCBaC_f8c.6nOVraOXGy2h0owK.vonsYPBX9Yc_FbFLx3HDbXhzCo6NKdLZFQbuO-9An7tEZmoQaZc8_jphOBVG0RQCChNwl1ShPqE54OM.L_OF9XBsO6pS8ZdV0yod2g","version":1}} -->
